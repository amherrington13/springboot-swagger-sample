import java.math.MathContext
import java.text.DecimalFormat
import java.text.SimpleDateFormat

apply plugin: 'cobertura'


cobertura {
	cobertura.coverageIgnoreTrivial
	coverageFormats = ['xml', 'html']
	coverageExcludes = ['.*\\$\\d.java']
	coverageSourceDirs = sourceSets.main.java.srcDirs + sourceSets.main.groovy.srcDirs
}

task coberturaCheck (dependsOn: tasks.cobertura){
	doLast{
		def coverageReport = new File("$buildDir/reports/cobertura/coverage.xml" )
		assert coverageReport.exists()
		assert coverageReport.canRead()
		def coverage = new XmlParser().parse("$buildDir/reports/cobertura/coverage.xml")
		def df = new DecimalFormat("#.##")
		def lineCoverageRate = coverage.attribute("line-rate")
		def branchCoverageRate = coverage.attribute("branch-rate")
		def minLineCoverageNum = new BigDecimal(minLineCoverage) //.round(new MathContext(3))
		def minBranchCoverageNum = new BigDecimal(minBranchCoverage) //.round(new MathContext(3))
		def lineCoverageNum = new BigDecimal(lineCoverageRate) * 100 //.round(new MathContext(3))
		def branchCoverageNum = new BigDecimal(branchCoverageRate) *100 //.round(new MathContext(3))
		if( lineCoverageNum < minLineCoverageNum || branchCoverageNum < minBranchCoverageNum) {
			def errorMsg = "*** Test coverage insufficient ***" +
				"\n Target line coverage: " + new DecimalFormat("#.##").format(minLineCoverageNum) + "%" +
				" ... achieved: " + new DecimalFormat("#.##").format(lineCoverageNum) + "%" +
				"\n Target branch coverage: " + new DecimalFormat("#.##").format(minBranchCoverageNum) + "%" +
				" ... achieved: " + new DecimalFormat("#.##").format(branchCoverageNum) + "%" +
				"\n For complete report see: " +
				"\n ./build/reports/cobertura/index.html"
			throw new RuntimeException(errorMsg)
		}

		println "*** Test coverage Success! ***\nTotal line coverage: " + df.format(lineCoverageNum) + "%\nTotal branch coverage: " + df.format(branchCoverageNum) + "%"
	}
	coberturaCheck.mustRunAfter coberturaReport
}

afterEvaluate {
	check.dependsOn coberturaCheck
}
